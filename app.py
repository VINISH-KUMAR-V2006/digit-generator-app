{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO+vjipUtfXXPDymfc91l5Y"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":400},"id":"fWOx_GBfTjJR","executionInfo":{"status":"error","timestamp":1750523090670,"user_tz":-330,"elapsed":224,"user":{"displayName":"VINISH KUMAR V","userId":"12297398914584370572"}},"outputId":"835e9645-a871-403a-d6c3-bfe813c5055f"},"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'streamlit'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-1-4277323737.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mstreamlit\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mst\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunctional\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["import streamlit as st\n","import torch\n","import torch.nn.functional as F\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# --- Define model class (same as during training) ---\n","class CVAE(torch.nn.Module):\n","    def __init__(self):\n","        super(CVAE, self).__init__()\n","        self.fc1 = torch.nn.Linear(784 + 10, 400)\n","        self.fc21 = torch.nn.Linear(400, 20)\n","        self.fc22 = torch.nn.Linear(400, 20)\n","        self.fc3 = torch.nn.Linear(20 + 10, 400)\n","        self.fc4 = torch.nn.Linear(400, 784)\n","\n","    def encode(self, x, y):\n","        inputs = torch.cat([x, y], dim=1)\n","        h1 = torch.relu(self.fc1(inputs))\n","        return self.fc21(h1), self.fc22(h1)\n","\n","    def reparameterize(self, mu, logvar):\n","        std = torch.exp(0.5 * logvar)\n","        eps = torch.randn_like(std)\n","        return mu + eps * std\n","\n","    def decode(self, z, y):\n","        inputs = torch.cat([z, y], dim=1)\n","        h3 = torch.relu(self.fc3(inputs))\n","        return torch.sigmoid(self.fc4(h3))\n","\n","    def forward(self, x, y):\n","        mu, logvar = self.encode(x, y)\n","        z = self.reparameterize(mu, logvar)\n","        return self.decode(z, y), mu, logvar\n","\n","# --- Helper functions ---\n","def one_hot(labels, num_classes=10):\n","    return F.one_hot(labels, num_classes).float()\n","\n","def load_model(path=\"cvae_mnist.pth\"):\n","    model = CVAE()\n","    model.load_state_dict(torch.load(path, map_location=torch.device(\"cpu\")))\n","    model.eval()\n","    return model\n","\n","def generate_images(model, digit, n_samples=5):\n","    with torch.no_grad():\n","        labels = torch.tensor([digit] * n_samples)\n","        one_hot_labels = one_hot(labels)\n","        z = torch.randn(n_samples, 20)\n","        outputs = model.decode(z, one_hot_labels)\n","        outputs = outputs.view(-1, 28, 28).numpy()\n","    return outputs\n","\n","# --- Streamlit UI ---\n","st.set_page_config(page_title=\"Handwritten Digit Image Generator\", layout=\"centered\")\n","st.title(\"ðŸ§  Handwritten Digit Image Generator\")\n","st.markdown(\"Generate synthetic MNIST-like images using your trained CVAE model.\")\n","\n","# Load model\n","model = load_model()\n","\n","# UI: choose digit\n","digit = st.selectbox(\"Choose a digit to generate (0â€“9):\", list(range(10)))\n","\n","if st.button(\"Generate Images\"):\n","    images = generate_images(model, digit)\n","\n","    st.subheader(f\"Generated images of digit {digit}\")\n","    cols = st.columns(len(images))\n","    for i, img in enumerate(images):\n","        cols[i].image(img, width=100, caption=f\"Sample {i+1}\")\n"]}]}